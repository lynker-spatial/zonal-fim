# zonal_operations.py

import duckdb
import ibis
from ibis import _
import rasterio

def read_zonal_outputs(database_path: str, zonal_output_path: str) -> None:
    """
    Reads zonal output data from a specified file and loads it into a DuckDB database.

    Args:
        database_path (str): Path to the DuckDB database file.
        zonal_output_path (str): Path to the zonal output data source.

    The function establishes a connection to the DuckDB database, loads the spatial extension,
    and creates or replaces a table named 'z_w' with the contents of the zonal output file.
    """
    data_conn = ibis.duckdb.connect(database_path)
    data_conn.raw_sql('LOAD spatial')
    data_conn.raw_sql(
        f"""
        CREATE OR REPLACE TABLE z_w AS 
        SELECT * FROM {zonal_output_path}
        """
    )
    data_conn.con.close()
    return

def filter_masked(database_path: str, elevation_threshold: float = None) -> None:
    """
    Filters and creates a new table 'masked_coverage_fraction' in a DuckDB database.

    Args:
        database_path (str): Path to the DuckDB database file.
        elevation_threshold (float, optional): If provided, it also filters out
            rows where the elevation is less than this threshold. Defaults to None.

    The function connects to the DuckDB database, loads the spatial extension, 
    and creates or replaces the 'masked_coverage_fraction' table by filtering 
    the 'coverage_fraction' table. It removes rows where the 'mask' column is NaN 
    and ensures that the 'elevation' column is not null or NaN. 
    """
    data_conn = ibis.duckdb.connect(database_path)
    data_conn.raw_sql('LOAD spatial')

    # If the threshold is provided, apply it to mask nodes
    elevation_filter_sql = ""
    if elevation_threshold is not None:
        print(f"Applying elevation threshold: filtering for elevation >= {elevation_threshold}")
        elevation_filter_sql = f"AND cf.elevation >= {elevation_threshold}"
    data_conn.raw_sql(
        f"""CREATE OR REPLACE TABLE masked_coverage_fraction AS
        SELECT * FROM coverage_fraction AS cf
        WHERE isnan(cf.mask) -- WHERE cf.mask IS NULL 
            AND cf.elevation IS NOT NULL 
            AND NOT isnan(cf.elevation); -- Remove NaN values generated by R
            {elevation_filter_sql}; 
        """
    )
    data_conn.con.close()
    return

